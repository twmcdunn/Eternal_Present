#BlueJ class context
comment0.target=OSCTimeTag64
comment0.text=\n\ This\ represents\ an\ OSC\ <i>Time-tag</i>.\n\ It\ uses\ the\ NTP\ (Network\ Time\ Protocol)\ time-tag\ format,\n\ and\ supports\ a\ different\ time\ range\ (smaller)\ and\ resolution\ (more\ precise)\n\ then\ {@link\ Date}.\n\ See\ <a\ href\="http\://opensoundcontrol.org/node/3/\#timetags">\n\ the\ OSC\ specification\ for\ Time-tags</a>\n\ and\ <a\ href\="https\://en.wikipedia.org/wiki/Network_Time_Protocol\#Timestamps">\n\ the\ NTP\ time-stamp\ documentation\ on\ Wikipedia</a>\ for\ specification\ details.\n\ OSC\ <i>Time-tag</i>\ aswell\ as\ <code>Date</code>\ are\ time-zone\ agnostic,\n\ though\ <code>Date</code>\ might\ use\ the\ default\ {@link\ java.util.Locale}\n\ in\ some\ cases,\ like\ when\ formatting\ as\ a\ <code>String</code>.\n\ The\ epoch\ 0\ starts\ in\ 1900\ and\ ends\ in\ 2036.\n\ Dates\ before\ or\ after\ the\ end\ of\ this\ first\ epoch\ are\ represented\ with\n\ a\ rolled\ over\ (the\ same)\ value\ range\ again,\ which\ means\ one\ needs\ to\n\ define\ the\ epoch\ to\ convert\ to,\n\ when\ converting\ from\ the\ short\ epoch\ OSC\ Time-tag\ to\ a\ bigger\ range\ one\ like\n\ Java\ <code>Date</code>.\n\ We\ do\ this\ with\ the\n\ {@link\ com.illposed.osc.argument.handler.DateTimeStampArgumentHandler\#PROP_NAME_EPOCH_INDICATOR_TIME}\n\ property.\n\ By\ default,\ it\ uses\ the\ epoch\ we\ are\ currently\ in.\n\ TODO\ Introduce\ 128bit\ version\ of\ this\ class\ (64bit\ seconds,\ 64bit\ fraction)\n\ \ \ as\ described\ by\ NTPv4.\n
comment1.params=ntpTime
comment1.target=OSCTimeTag64(long)
comment10.params=
comment10.target=OSCTimeTag64\ clone()
comment11.params=epochIndicatorTime
comment11.target=java.util.Date\ toDate(long)
comment11.text=\n\ Returns\ the\ Java\ date\ closest\ to\ this\ time-tags\ value.\n\ @param\ epochIndicatorTime\ the\ resulting\ date\ will\ be\n\ \ \ in\ the\ same\ OSC\ epoch\ as\ this\ Java\ date-stamp\n\ @return\ this\ time-tags\ value\ rounded\ to\ the\ closest\ full\ millisecond\n
comment12.params=epochIndicator
comment12.target=java.util.Date\ toDate(java.util.Date)
comment12.text=\n\ Returns\ the\ Java\ date\ closest\ to\ this\ time-tags\ value.\n\ @param\ epochIndicator\ the\ resulting\ date\ will\ be\n\ \ \ in\ the\ same\ OSC\ epoch\ as\ this\n\ @return\ this\ time-tags\ value\ rounded\ to\ the\ closest\ full\ millisecond\n
comment13.params=
comment13.target=java.util.Date\ toDate()
comment13.text=\n\ Returns\ the\ Java\ date\ closest\ to\ this\ time-tags\ value.\n\ The\ resulting\ date\ will\ be\ in\ the\ current\ OSC\ epoch.\n\ @return\ this\ time-tags\ value\ rounded\ to\ the\ closest\ full\ millisecond\n
comment14.params=javaTime
comment14.target=long\ findEpochStartJavaTime(long)
comment15.params=epochStart
comment15.target=long\ toJavaTimeInEpoch(long)
comment16.params=epochIndicatorTime
comment16.target=long\ toJavaTime(java.lang.Long)
comment17.params=seconds\ fraction
comment17.target=long\ toNtpTimeTag(long,\ long)
comment18.params=
comment18.target=java.time.Instant\ toInstant()
comment18.text=\n\ Returns\ the\ Java\ instant\ closest\ to\ this\ time-tags\ value.\n\ {@link\ Instant}\ covers\ the\ range\ of\ the\ OSC\ time\ tag,\n\ and\ nearly\ covers\ the\ precision\n\ (1\ nanosecond\ accuracy\ instead\ of\ 233\ picoseconds).\n\ @see\ \#valueOf(Instant)\n\ @return\ this\ time-tags\ value\ rounded\ to\ the\ closest\ full\ nanosecond\n
comment19.params=instant
comment19.target=OSCTimeTag64\ valueOf(java.time.Instant)
comment19.text=\n\ Returns\ the\ Java\ instant\ closest\ to\ this\ time-tags\ value.\n\ \ {@link\ Instant}\ covers\ the\ range\ of\ the\ OSC\ time\ tag,\n\ \ and\ nearly\ covers\ the\ precision\n\ \ (1\ nanosecond\ accuracy\ instead\ of\ 233\ picoseconds).\n\ @param\ instant\ to\ be\ converted\ to\ an\ OSC\ time\ tag\n\ @see\ \#toInstant()\n\ @return\ the\ closest\n
comment2.params=
comment2.target=long\ getNtpTime()
comment2.text=\n\ Returns\ the\ OSC/NTP\ conform\ <i>Time-tag</i>\ value.\n\ @return\ 64bits\:\n\ \ \ 32\ higher\ bits\ (including\ MSB)\:\ seconds,\n\ \ \ 32\ lower\ bits\:\ fraction\ (of\ a\ second)\n
comment20.params=ntpTime
comment20.target=OSCTimeTag64\ valueOf(long)
comment21.params=seconds\ fraction
comment21.target=OSCTimeTag64\ valueOf(long,\ long)
comment22.params=javaTime
comment22.target=OSCTimeTag64\ valueOf(java.util.Date)
comment23.params=
comment23.target=java.lang.String\ toString()
comment24.params=javaTime
comment24.target=long\ javaToNtpTimeStamp(long)
comment24.text=\n\ Converts\ a\ Java\ time-stamp\ (milliseconds\ since\ 1970)\n\ to\ a\ 64-bit\ OSC\ time\ representation.\n\ This\ code\ was\ copied\ from\ the\ "Apache\ Jakarta\ Commons\ -\ Net"\ library,\n\ which\ is\ licensed\ under\ the\n\ <a\ href\="http\://www.apache.org/licenses/LICENSE-2.0.html">\n\ Apache-2.0</a>.\n\ The\ original\ source\ file\ can\ be\ found\n\ <a\ href\="http\://svn.apache.org/viewvc/commons/proper/net/trunk/src/main/java/org/apache/commons/net/ntp/TimeStamp.java?view\=co">\n\ here</a>.\n\ @param\ javaTime\ Java\ time-stamp,\ as\ returned\ by\ {@link\ Date\#getTime()}\n\ @return\ OSC\ time-tag\ representation\ of\ the\ Java\ time\ value.\n
comment25.params=
comment25.target=java.util.Date\ immediateDate()
comment25.text=\n\ Creates\ the\ Java\ representation\ of\ an\ OSC\ time-tag\ with\ the\ semantics\ of\n\ "immediately"/"now".\n\n\ @return\ the\ created\ Java\ <code>Date</code>\n\ @see\ \#IMMEDIATE\n
comment3.params=
comment3.target=long\ getSeconds()
comment3.text=\n\ Returns\ the\ number\ of\ whole\ seconds\ from\ the\ start\ of\ the\ epoch\n\ of\ this\ time-tag.\n\ @return\ high-order\ 32-bit\ unsigned\ value\ representing\ the\ "seconds"\ part\n\ \ \ of\ this\ OSC\ <i>Time-tag</i>\n
comment4.params=
comment4.target=long\ getFraction()
comment4.text=\n\ Returns\ the\ fraction\ of\ a\ second\ from\ the\ start\ of\ the\ epoch\ +\ seconds\n\ of\ this\ time-tag.\n\ Denotes\ a\ number\ of\ seconds\ *\ (1\ /\ 2^32),\n\ which\ allows\ to\ specify\ to\ a\ precision\ of\ about\ 233\ pico\ seconds.\n\ @return\ lower-order\ 32-bit\ unsigned\ value\ representing\ the\ "fraction"\n\ \ \ part\ of\ this\ OSC\ <i>Time-tag</i>\n
comment5.params=
comment5.target=int\ getNanos()
comment5.text=\n\ Returns\ the\ rounded\ number\ of\ nanoseconds\ from\ the\ start\ of\ the\ epoch\ +\ seconds\n\ of\ this\ time-tag.\n\ @return\ 32-bit\ unsigned\ value\ representing\ the\ nano-seconds\ after\ the\ last\ full\ second\n\ \ \ of\ this\ OSC\ <i>Time-tag</i>\n
comment6.params=
comment6.target=boolean\ isImmediate()
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment8.params=
comment8.target=int\ hashCode()
comment9.params=other
comment9.target=int\ compareTo(OSCTimeTag64)
numComments=26
