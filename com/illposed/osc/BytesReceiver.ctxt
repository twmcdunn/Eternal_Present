#BlueJ class context
comment0.target=BytesReceiver
comment0.text=\n\ This\ has\ a\ very\ similar\ function\ to\ BytesBuffer.\n\ It\ shares\ many\ of\ its\ methods,\ though\ it\ misses\ some,\n\ and\ adds\ some\ more.\n\ The\ general\ idea\ of\ it\ is,\n\ to\ have\ a\ buffer\ that\ is\ just\ filled\ sequentially\ over\ time,\n\ with\ the\ ability\ to\ replace\ specific\ parts\ of\ the\ internal\ buffer\ later\ on,\n\ but\ only\ when\ the\ original\ put\ and\ the\ overwriting\ put\n\ receive\ data\ of\ the\ same\ length.\n\ This\ is\ a\ quite\ common\ scenario.\n\ This\ interface\ alone\ has\ no\ advantage\ over\ {@link\ ByteBuffer},\n\ but\ it\ allows\ for\ alternate\ implementations\ of\ it,\n\ which\ have\ performance\ benefits\ in\ certain\ scenarios.\n\ @see\ ByteArrayListBytesReceiver\n
comment1.params=data
comment1.target=BytesReceiver\ put(byte)
comment1.text=\n\ Relative\ <i>put</i>\ method&nbsp;&nbsp;<i>(optional\ operation)</i>.\n\n\ <p>\ Writes\ the\ given\ byte\ into\ this\ buffer\ at\ the\ current\n\ position,\ and\ then\ increments\ the\ position.\ </p>\n\n\ @param\ \ data\n\ \ \ \ \ \ \ \ \ The\ byte\ to\ be\ written\n\n\ @return\ \ This\ buffer\n\n\ @throws\ \ java.nio.BufferOverflowException\n\ \ \ \ \ \ \ \ \ \ If\ this\ buffer's\ current\ position\ is\ not\ smaller\ than\ its\ limit\n\n\ @throws\ \ java.nio.ReadOnlyBufferException\n\ \ \ \ \ \ \ \ \ \ If\ this\ buffer\ is\ read-only\n
comment2.params=src
comment2.target=BytesReceiver\ put(byte[])
comment2.text=\n\ Relative\ bulk\ <i>put</i>\ method&nbsp;&nbsp;<i>(optional\ operation)</i>.\n\n\ <p>\ This\ method\ transfers\ the\ entire\ content\ of\ the\ given\ source\n\ byte\ array\ into\ this\ buffer.\ \ An\ invocation\ of\ this\ method\ of\ the\n\ form\ <tt>dst.put(a)</tt>\ behaves\ in\ exactly\ the\ same\ way\ as\ the\n\ invocation\n\n\ <pre>\n\ \ \ \ \ dst.put(a,\ 0,\ a.length)\ </pre>\n\n\ @param\ \ \ src\n\ \ \ \ \ \ \ \ \ \ The\ source\ array\n\n\ @return\ \ This\ buffer\n\n\ @throws\ \ java.nio.BufferOverflowException\n\ \ \ \ \ \ \ \ \ \ If\ there\ is\ insufficient\ space\ in\ this\ buffer\n\n\ @throws\ \ java.nio.ReadOnlyBufferException\n\ \ \ \ \ \ \ \ \ \ If\ this\ buffer\ is\ read-only\n
comment3.params=src
comment3.target=BytesReceiver\ put(java.nio.ByteBuffer)
comment3.text=\n\ Relative\ bulk\ <i>put</i>\ method&nbsp;&nbsp;<i>(optional\ operation)</i>.\n\n\ <p>\ This\ method\ transfers\ the\ bytes\ remaining\ in\ the\ given\ source\n\ buffer\ into\ this\ buffer.\ \ If\ there\ are\ more\ bytes\ remaining\ in\ the\n\ source\ buffer\ than\ in\ this\ buffer,\ that\ is,\ if\n\ <tt>src.remaining()</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>,\n\ then\ no\ bytes\ are\ transferred\ and\ a\ {@link\n\ java.nio.BufferOverflowException}\ is\ thrown.\n\n\ <p>\ Otherwise,\ this\ method\ copies\n\ <i>n</i>&nbsp;\=&nbsp;<tt>src.remaining()</tt>\ bytes\ from\ the\ given\n\ buffer\ into\ this\ buffer,\ starting\ at\ each\ buffer's\ current\ position.\n\ The\ positions\ of\ both\ buffers\ are\ then\ incremented\ by\ <i>n</i>.\n\n\ <p>\ In\ other\ words,\ an\ invocation\ of\ this\ method\ of\ the\ form\n\ <tt>dst.put(src)</tt>\ has\ exactly\ the\ same\ effect\ as\ the\ loop\n\n\ <pre>\n\ \ \ \ \ while\ (src.hasRemaining())\n\ \ \ \ \ \ \ \ \ dst.put(src.get());\ </pre>\n\n\ except\ that\ it\ first\ checks\ that\ there\ is\ sufficient\ space\ in\ this\n\ buffer\ and\ it\ is\ potentially\ much\ more\ efficient.\n\n\ @param\ \ src\n\ \ \ \ \ \ \ \ \ The\ source\ buffer\ from\ which\ bytes\ are\ to\ be\ read;\n\ \ \ \ \ \ \ \ \ must\ not\ be\ this\ buffer\n\n\ @return\ \ This\ buffer\n\n\ @throws\ \ java.nio.BufferOverflowException\n\ \ \ \ \ \ \ \ \ \ If\ there\ is\ insufficient\ space\ in\ this\ buffer\n\ \ \ \ \ \ \ \ \ \ for\ the\ remaining\ bytes\ in\ the\ source\ buffer\n\n\ @throws\ \ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ If\ the\ source\ buffer\ is\ this\ buffer\n\n\ @throws\ \ java.nio.ReadOnlyBufferException\n\ \ \ \ \ \ \ \ \ \ If\ this\ buffer\ is\ read-only\n
comment4.params=
comment4.target=BytesReceiver\ clear()
comment4.text=\n\ Clears\ this\ buffer.\ \ The\ position\ is\ set\ to\ zero,\ the\ limit\ is\ set\ to\n\ the\ capacity,\ and\ the\ mark\ is\ discarded.\n\n\ <p>\ Invoke\ this\ method\ before\ using\ a\ sequence\ of\ channel-read\ or\n\ <i>put</i>\ operations\ to\ fill\ this\ buffer.\ \ For\ example\:\n\n\ <blockquote><pre>\n\ buf.clear();\ \ \ \ \ //\ Prepare\ buffer\ for\ reading\n\ in.read(buf);\ \ \ \ //\ Read\ data</pre></blockquote>\n\n\ <p>\ This\ method\ does\ not\ actually\ erase\ the\ data\ in\ the\ buffer,\ but\ it\n\ is\ named\ as\ if\ it\ did\ because\ it\ will\ most\ often\ be\ used\ in\ situations\n\ in\ which\ that\ might\ as\ well\ be\ the\ case.\ </p>\n\n\ @return\ \ This\ buffer\n
comment5.params=
comment5.target=int\ position()
comment5.text=\n\ Returns\ this\ buffers\ position.\n\n\ @return\ \ The\ position\ of\ this\ buffer\n
comment6.params=src
comment6.target=BytesReceiver.PlaceHolder\ putPlaceHolder(byte[])
comment6.text=\n\ But\ a\ piece\ of\ data,\ which\ we\ later\ might\ want\ to\ replace\n\ with\ an\ other\ one\ of\ equal\ length.\n\ @param\ src\ the\ preliminary\ piece\ of\ data\n\ @return\ an\ object\ holding\ an\ internal\ reference\ on\ the\ put\ piece\ of\ data,\n\ \ \ which\ allows\ to\ later\ replace\ it\ in\ the\ internal\ buffer\n
comment7.params=
comment7.target=byte[]\ toByteArray()
comment7.text=\n\ Returns\ a\ raw\ byte\ array\ containing\ all\ data\ this\ instance\ received\n\ since\ tha\ last\ {@link\ \#clear()}.\n\ NOTE\ This\ is\ a\ costly\ method\ (performance\ wise\ ->\ memory\ usage),\n\ and\ should\ therefore\ only\ be\ used\ in\ unit\ tests.\n\n\ @return\ the\ current\ internal\ buffers\ content\ in\ a\ byte\ array\n
numComments=8
