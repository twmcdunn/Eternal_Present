#BlueJ class context
comment0.target=OSCPortIn
comment0.text=\n\ Listens\ for\ OSC\ packets\ over\ a\ network.\n\n\ An\ example\:<br>\n\ <blockquote><pre>{@code\n\ //\ listens\ on\ the\ wildcard\ address\ (all\ local\ network\ interfaces)\n\ //\ on\ the\ given\ port\ (the\ default\ one)\n\ OSCPortIn\ receiver\ \=\ new\ OSCPortIn(OSCPort.DEFAULT_SC_OSC_PORT);\n\ OSCMessageListener\ listener\ \=\ new\ OSCMessageListener()\ {\n\ \ \ public\ void\ acceptMessage(OSCMessageEvent\ event)\ {\n\ \ \ \ \ System.out.println("Message\ received\:\ "\ +\ event.getMessage().getAddress());\n\ \ \ }\n\ };\n\ MessageSelector\ selector\ \=\ new\ OSCPatternAddressMessageSelector(\n\ \ \ \ \ "/message/receiving");\n\ receiver.getDispatcher().addListener(selector,\ listener);\n\ //\ NOTE\ You\ might\ want\ to\ use\ this\ code,\ in\ case\ you\ have\ bundles\n\ //\ \ \ \ \ \ with\ time-stamps\ in\ the\ future,\ which\ you\ still\ want\n\ //\ \ \ \ \ \ to\ process\ immediately.\n\ //receiver.getDispatcher().setAlwaysDispatchingImmediately(true);\n\ receiver.startListening();\n\ }</pre></blockquote>\n\n\ Then,\ using\ a\ program\ such\ as\ SuperCollider\ or\ sendOSC,\ send\ a\ message\n\ to\ this\ computer,\ port\ {@link\ \#DEFAULT_SC_OSC_PORT},\n\ with\ the\ address\ "/message/receiving".\n
comment1.params=listeners
comment1.target=com.illposed.osc.OSCPacketDispatcher\ getDispatcher(java.util.List)
comment10.params=port
comment10.target=OSCPortIn(int)
comment10.text=\n\ Creates\ an\ OSC-Port\ that\ listens\ on\ the\ wildcard\ address\n\ (all\ local\ network\ interfaces)\ on\ the\ specified\ local\ port.\n\ @param\ port\ port\ number\ to\ listen\ on\n\ @throws\ IOException\ if\ we\ fail\ to\ bind\ a\ channel\ to\ the\ local\ address\n
comment11.params=
comment11.target=OSCPortIn()
comment11.text=\n\ Creates\ an\ OSC-Port\ that\ listens\ on\ the\ wildcard\ address\n\ (all\ local\ network\ interfaces)\ on\ the\ default\ local\ port\n\ {@link\ \#DEFAULT_SC_OSC_PORT}.\n\ @throws\ IOException\ if\ we\ fail\ to\ bind\ a\ channel\ to\ the\ local\ address\n
comment12.params=
comment12.target=void\ run()
comment12.text=\n\ Run\ the\ loop\ that\ listens\ for\ OSC\ on\ a\ socket\ until\n\ {@link\ \#isListening()}\ becomes\ false.\n\ @see\ Runnable\#run()\n
comment13.params=exception
comment13.target=void\ stopListening(java.lang.Exception)
comment14.params=exception
comment14.target=void\ badPacketReceived(com.illposed.osc.OSCParseException)
comment15.params=
comment15.target=void\ startListening()
comment15.text=\n\ Start\ listening\ for\ incoming\ OSCPackets\n
comment16.params=
comment16.target=void\ stopListening()
comment16.text=\n\ Stop\ listening\ for\ incoming\ OSCPackets\n
comment17.params=
comment17.target=boolean\ isListening()
comment17.text=\n\ Is\ this\ port\ listening\ for\ packets?\n\ @return\ true\ if\ this\ port\ is\ in\ listening\ mode\n
comment18.params=
comment18.target=boolean\ isDaemonListener()
comment18.text=\n\ Is\ this\ port\ listening\ for\ packets\ in\ daemon\ mode?\n\ @see\ \#setDaemonListener\n\ @return\ <code>true</code>\ if\ this\ ports\ listening\ thread\ is/would\ be\ in\ daemon\ mode\n
comment19.params=daemonListener
comment19.target=void\ setDaemonListener(boolean)
comment19.text=\n\ Set\ whether\ this\ port\ should\ be\ listening\ for\ packets\ in\ daemon\ mode.\n\ The\ Java\ Virtual\ Machine\ exits\ when\ the\ only\ threads\ running\ are\ all\ daemon\ threads.\n\ This\ is\ <code>true</code>\ by\ default.\n\ Probably\ the\ only\ feasible\ reason\ to\ set\ this\ to\ <code>false</code>,\n\ is\ if\ the\ code\ in\ the\ listener\ is\ very\ small,\n\ and\ the\ application\ consists\ of\ nothing\ more\ then\ this\ listening\ thread.\n\ @see\ Thread\#setDaemon(boolean)\n\ @param\ daemonListener\ whether\ this\ ports\ listening\ thread\ should\ be\ in\ daemon\ mode\n
comment2.params=
comment2.target=com.illposed.osc.OSCPacketListener\ defaultPacketListener()
comment20.params=
comment20.target=boolean\ isResilient()
comment20.text=\n\ Whether\ this\ port\ continues\ listening\ and\ throws\n\ a\ {@link\ OSCParseException}\ after\ receiving\ a\ bad\ packet.\n\ @return\ <code>true</code>\ if\ this\ port\ will\ continue\ listening\n\ \ \ after\ a\ parse\ exception\n
comment21.params=resilient
comment21.target=void\ setResilient(boolean)
comment21.text=\n\ Set\ whether\ this\ port\ continues\ listening\ and\ throws\n\ a\ {@link\ OSCParseException}\ after\ receiving\ a\ bad\ packet.\n\ @param\ resilient\ whether\ this\ port\ should\ continue\ listening\n\ \ \ after\ a\ parse\ exception\n
comment22.params=
comment22.target=void\ close()
comment23.params=
comment23.target=java.lang.String\ toString()
comment24.params=
comment24.target=com.illposed.osc.OSCPacketDispatcher\ getDispatcher()
comment25.params=
comment25.target=java.util.List\ getPacketListeners()
comment26.params=listener
comment26.target=void\ addPacketListener(com.illposed.osc.OSCPacketListener)
comment26.text=\n\ Adds\ a\ listener\ that\ will\ handle\ all\ packets\ received.\n\ This\ includes\ bundles\ and\ individual\ (non-bundled)\ messages.\n\ Registered\ listeners\ will\ be\ notified\ of\ packets\ in\ the\ order\ they\ were\n\ added\ to\ the\ dispatcher.\n\ A\ listener\ can\ be\ registered\ multiple\ times,\ and\ will\ consequently\ be\n\ notified\ as\ many\ times\ as\ it\ was\ added.\n\ @param\ listener\ receives\ and\ handles\ packets\n
comment27.params=listener
comment27.target=void\ removePacketListener(com.illposed.osc.OSCPacketListener)
comment27.text=\n\ Removes\ a\ packet\ listener,\ which\ will\ no\ longer\ be\ notified\ of\ incoming\n\ packets.\n\ Removes\ only\ the\ first\ occurrence\ of\ the\ listener.\n\ @param\ listener\ will\ no\ longer\ receive\ packets\n
comment3.params=
comment3.target=java.util.List\ defaultPacketListeners()
comment4.params=parserBuilder\ packetListeners\ local\ remote\ protocol
comment4.target=OSCPortIn(com.illposed.osc.OSCSerializerAndParserBuilder,\ java.util.List,\ java.net.SocketAddress,\ java.net.SocketAddress,\ NetworkProtocol)
comment4.text=\n\ Create\ an\ OSC-Port\ that\ listens\ on\ the\ given\ local\ socket\ for\ packets\ from\ {@code\ remote},\n\ using\ a\ parser\ created\ with\ the\ given\ factory,\n\ and\ with\ {@link\ \#isResilient()\ resilient}\ set\ to\ true.\n\ @param\ parserBuilder\ to\ create\ the\ internal\ parser\ from\n\ @param\ packetListeners\ to\ handle\ received\ and\ serialized\ OSC\ packets\n\ @param\ local\ address\ to\ listen\ on\n\ @param\ remote\ address\ to\ listen\ to\n\ @param\ protocol\ the\ network\ protocol\ by\ which\ to\ receive\ OSC\ packets\n\ @throws\ IOException\ if\ we\ fail\ to\ bind\ a\ channel\ to\ the\ local\ address\n
comment5.params=parserBuilder\ packetListeners\ local\ remote
comment5.target=OSCPortIn(com.illposed.osc.OSCSerializerAndParserBuilder,\ java.util.List,\ java.net.SocketAddress,\ java.net.SocketAddress)
comment6.params=parserBuilder\ packetListeners\ local
comment6.target=OSCPortIn(com.illposed.osc.OSCSerializerAndParserBuilder,\ java.util.List,\ java.net.SocketAddress)
comment7.params=parserBuilder\ local
comment7.target=OSCPortIn(com.illposed.osc.OSCSerializerAndParserBuilder,\ java.net.SocketAddress)
comment8.params=parserBuilder\ port
comment8.target=OSCPortIn(com.illposed.osc.OSCSerializerAndParserBuilder,\ int)
comment9.params=local
comment9.target=OSCPortIn(java.net.SocketAddress)
comment9.text=\n\ Creates\ an\ OSC-Port\ that\ listens\ on\ the\ given\ local\ socket.\n\ @param\ local\ address\ to\ listen\ on\n\ @throws\ IOException\ if\ we\ fail\ to\ bind\ a\ channel\ to\ the\ local\ address\n
numComments=28
