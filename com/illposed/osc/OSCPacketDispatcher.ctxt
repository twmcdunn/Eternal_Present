#BlueJ class context
comment0.target=OSCPacketDispatcher
comment0.text=\n\ Dispatches\ {@link\ OSCPacket}s\ to\ registered\ listeners\ (<i>Method</i>s).\n
comment1.params=serializerBuilder\ dispatchScheduler
comment1.target=OSCPacketDispatcher(OSCSerializerAndParserBuilder,\ java.util.concurrent.ScheduledExecutorService)
comment10.params=listener
comment10.target=void\ addBadDataListener(OSCBadDataListener)
comment10.text=\n\ Adds\ a\ listener\ that\ will\ be\ notified\ of\ incoming\ bad/unrecognized\ data.\n\ @param\ listener\ will\ receive\ chunks\ of\ unrecognized\ data\n
comment11.params=listener
comment11.target=void\ removeBadDataListener(OSCBadDataListener)
comment11.text=\n\ Removes\ a\ listener\ that\ is\ notified\ of\ incoming\ bad/unrecognized\ data.\n\ @param\ listener\ will\ no\ longer\ receive\ chunks\ of\ unrecognized\ data\n
comment12.params=event
comment12.target=void\ handleBadData(OSCBadDataEvent)
comment13.params=source\ packet\ timeStamp
comment13.target=void\ dispatchPacket(java.lang.Object,\ OSCPacket,\ argument.OSCTimeTag64)
comment13.text=\n\ The\ work-horse\ of\ {@link\ \#handlePacket(OSCPacketEvent)}.\n\ @param\ source\ the\ origin\ of\ the\ packet,\ usually\ an\ instance\ of\n\ \ \ {@link\ com.illposed.osc.transport.udp.OSCPortIn}\n\ @param\ packet\ to\ be\ dispatched\n\ @param\ timeStamp\ the\ associated\ time-stamp\n
comment14.params=event
comment14.target=void\ handlePacket(OSCPacketEvent)
comment14.text=\n\ Dispatches\ the\ packet\ immediately\ if\ it\ is\ a\ simple\ message,\n\ otherwise\ (it\ being\ a\ bundle),\ its\ dispatch\ might\ get\ delayed,\n\ depending\ on\ whether\ it\ has\ an\ associated\ {@link\ OSCBundle\#getTimestamp()\ time-stamp},\n\ and\ whether\ we\ are\ {@link\ \#isAlwaysDispatchingImmediately()\ always\ dispatching\ immediately}.\n\ @param\ event\ the\ packet\ to\ be\ dispatched\ plus\ meta-data\n
comment15.params=timeStamp
comment15.target=long\ calculateDelayFromNow(argument.OSCTimeTag64)
comment16.params=source\ bundle
comment16.target=void\ dispatchBundle(java.lang.Object,\ OSCBundle)
comment16.text=\n\ Dispatches\ the\ bundle,\ either\ immediately\ or\ at\ the\ time\ indicated\ by\ its\ associated\ time-stamp,\n\ depending\ on\ whether\ it\ has\ an\ associated\ {@link\ OSCBundle\#getTimestamp()\ time-stamp},\n\ and\ whether\ we\ are\ {@link\ \#isAlwaysDispatchingImmediately()\ always\ dispatching\ immediately}.\n\ @param\ source\ the\ origin\ of\ the\ packet,\ usually\ an\ instance\ of\n\ \ \ {@link\ com.illposed.osc.transport.udp.OSCPortIn}\n\ @param\ bundle\ the\ bundle\ to\ be\ dispatched\n
comment17.params=source\ bundle
comment17.target=void\ dispatchBundleNow(java.lang.Object,\ OSCBundle)
comment17.text=\n\ Immediately\ dispatches\ a\ bundle\ to\ the\ registered\ listeners.\n\ This\ means\ contained\ messages\ are\ dispatched\ immediately,\n\ but\ contained\ sub-bundles\ might\ still\ be\ dispatched\ later,\n\ depending\ on\ whether\ they\ have\ an\ associated\ {@link\ OSCBundle\#getTimestamp()\ time-stamp},\n\ and\ whether\ we\ are\ {@link\ \#isAlwaysDispatchingImmediately()\ always\ dispatching\ immediately}.\n\ @param\ source\ the\ origin\ of\ the\ packet,\ usually\ an\ instance\ of\n\ \ \ {@link\ com.illposed.osc.transport.udp.OSCPortIn}\n\ @param\ bundle\ the\ bundle\ to\ be\ dispatched\ immediately\n
comment18.params=arguments
comment18.target=java.lang.CharSequence\ generateTypeTagsString(java.util.List)
comment19.params=message
comment19.target=void\ ensureMetaInfo(OSCMessage)
comment2.params=serializerBuilder
comment2.target=OSCPacketDispatcher(OSCSerializerAndParserBuilder)
comment20.params=event
comment20.target=void\ dispatchMessageNow(OSCMessageEvent)
comment20.text=\n\ Immediately\ dispatches\ a\ message\ to\ the\ registered\ listeners,\n\ after\ ensuring\ it\ has\ meta-info\ set.\n\ @param\ event\ the\ message\ to\ dispatch\ plus\ event\ meta-data\n
comment3.params=
comment3.target=OSCPacketDispatcher()
comment4.params=
comment4.target=java.util.concurrent.ScheduledExecutorService\ createDefaultDispatchScheduler()
comment5.params=alwaysDispatchingImmediately
comment5.target=void\ setAlwaysDispatchingImmediately(boolean)
comment5.text=\n\ Set\ whether\ to\ disregard\ bundle\ time-stamps\ for\ dispatch-scheduling.\n\ @param\ alwaysDispatchingImmediately\ if\ {@code\ true},\ all\ bundles\ will\ be\n\ \ \ dispatched\ immediately\n
comment6.params=
comment6.target=boolean\ isAlwaysDispatchingImmediately()
comment6.text=\n\ Indicates\ whether\ we\ disregard\ bundle\ time-stamps\ for\ dispatch-scheduling.\n\ @return\ {@code\ true},\ if\ all\ bundles\ are\ dispatched\ immediately\n
comment7.params=
comment7.target=boolean\ isMetaInfoRequired()
comment7.text=\n\ Indicates\ whether\ we\ need\ outgoing\ messages\ to\ have\ meta-info\ attached.\n\ @return\ {@code\ true},\ if\ at\ least\ one\ of\ the\ registered\ listeners\ requires\ message\ meta-info\n
comment8.params=messageSelector\ listener
comment8.target=void\ addListener(MessageSelector,\ OSCMessageListener)
comment8.text=\n\ Adds\ a\ listener\ (<i>Method</i>\ in\ OSC\ speak)\ that\ will\ be\ notified\n\ of\ incoming\ messages\ that\ match\ the\ selector.\n\ Registered\ listeners\ will\ be\ notified\ of\ selected\ messages\ in\ the\ order\n\ they\ were\ added\ to\ the\ dispatcher.\n\ A\ listener\ can\ be\ registered\ multiple\ times,\n\ and\ will\ consequently\ be\ notified\ as\ many\ times\ as\ it\ was\ added.\n\ @param\ messageSelector\ selects\ which\ messages\ will\ be\ forwarded\ to\ the\ listener\n\ @param\ listener\ receives\ messages\ accepted\ by\ the\ selector\n
comment9.params=messageSelector\ listener
comment9.target=void\ removeListener(MessageSelector,\ OSCMessageListener)
comment9.text=\n\ Removes\ a\ listener\ (<i>Method</i>\ in\ OSC\ speak),\ which\ will\ no\ longer\n\ be\ notified\ of\ incoming\ messages.\n\ Removes\ only\ the\ first\ occurrence\ of\ the\ selector\ and\ listener\ pair.\n\ @param\ messageSelector\ has\ to\ match\ the\ registered\ pair\ to\ be\ removed\n\ @param\ listener\ will\ no\ longer\ receive\ messages\ accepted\ by\ the\ selector\n
numComments=21
