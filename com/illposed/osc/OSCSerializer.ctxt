#BlueJ class context
comment0.target=OSCSerializer
comment0.text=\n\ Converts\ OSC\ packet\ Java\ objects\ to\ their\ byte\ stream\ representations,\n\ conforming\ to\ the\ OSC\ specification.\n\ This\ class\ is\ NOT\ thread-save,\ and\ will\ produce\ invalid\ results\ and\ errors\n\ if\ used\ by\ multiple\ threads\ simultaneously.\n\ Please\ use\ a\ separate\ instance\ per\ thread.\n\n\ The\ implementation\ was\ originally\ based\ on\n\ <a\ href\="http\://www.emergent.de">Markus\ Gaelli</a>\ and\n\ Iannis\ Zannos's\ OSC\ implementation\ in\ Squeak\ (a\ Smalltalk\ dialect).\n
comment1.params=types\ properties\ output
comment1.target=OSCSerializer(java.util.List,\ java.util.Map,\ BytesReceiver)
comment1.text=\n\ Creates\ a\ new\ serializer\ with\ all\ the\ required\ ingredients.\n\ @param\ types\ all\ of\ these,\ and\ only\ these\ arguments\ will\ be\ serializable\n\ \ \ by\ this\ object,\ that\ are\ supported\ by\ these\ handlers\n\ @param\ properties\ see\ {@link\ ArgumentHandler\#setProperties(Map)}\n\ @param\ output\ the\ output\ buffer,\ where\ raw\ OSC\ data\ is\ written\ to\n
comment10.params=message
comment10.target=void\ writeArguments(OSCMessage)
comment10.text=\n\ Serializes\ the\ arguments\ of\ a\ message.\n\ @param\ message\ the\ arguments\ of\ this\ message\ will\ be\ serialized\n\ @throws\ OSCSerializeException\ if\ the\ message\ arguments\ failed\ to\ serialize\n
comment11.params=message
comment11.target=void\ write(OSCMessage)
comment12.params=packet
comment12.target=void\ writeSizeAndData(OSCPacket)
comment12.text=\n\ Converts\ the\ packet\ into\ its\ OSC\ compliant\ byte\ array\ representation,\n\ then\ writes\ the\ number\ of\ bytes\ to\ the\ stream,\ followed\ by\ the\ actual\ data\ bytes.\n\ @param\ packet\ to\ be\ converted\ and\ written\ to\ the\ stream\n\ @throws\ OSCSerializeException\ if\ the\ packet\ failed\ to\ serialize\n
comment13.params=packet
comment13.target=void\ writePacket(OSCPacket)
comment14.params=packet
comment14.target=void\ write(OSCPacket)
comment15.params=arguments
comment15.target=void\ writeOnlyTypeTags(java.util.List)
comment15.text=\n\ Write\ only\ the\ type\ tags\ for\ a\ given\ list\ of\ arguments.\n\ This\ is\ primarily\ used\ by\ the\ packet\ dispatcher.\n\ @param\ arguments\ to\ write\ the\ type\ tags\ from\n\ @throws\ OSCSerializeException\ if\ the\ arguments\ failed\ to\ serialize\n
comment16.params=argumentClass
comment16.target=java.util.Set\ findSuperTypes(java.lang.Class)
comment17.params=argumentClass
comment17.target=java.lang.Class\ findSuperType(java.lang.Class)
comment18.params=argumentValue\ argumentClass
comment18.target=argument.ArgumentHandler\ findType(java.lang.Object,\ java.lang.Class)
comment19.params=argumentValue
comment19.target=argument.ArgumentHandler\ findType(java.lang.Object)
comment2.params=
comment2.target=java.util.Map\ getClassToTypeMapping()
comment20.params=anObject
comment20.target=void\ write(java.lang.Object)
comment20.text=\n\ Write\ an\ object\ into\ the\ byte\ stream.\n\ @param\ anObject\ (usually)\ one\ of\ Float,\ Double,\ String,\ Character,\ Integer,\ Long,\n\ \ \ or\ a\ Collection\ of\ these.\n\ \ \ See\ {@link\ \#getClassToTypeMapping()}\ for\ a\ complete\ list\ of\ which\ classes\ may\ be\ used\ here.\n\ @throws\ OSCSerializeException\ if\ the\ argument\ object\ failed\ to\ serialize\n
comment21.params=value
comment21.target=java.lang.Class\ extractTypeClass(java.lang.Object)
comment22.params=value
comment22.target=void\ writeType(java.lang.Object)
comment22.text=\n\ Write\ the\ OSC\ specification\ type\ tag\ for\ the\ type\ a\ certain\ Java\ type\n\ converts\ to.\n\ @param\ value\ of\ this\ argument,\ we\ need\ to\ write\ the\ type\ identifier\n\ @throws\ OSCSerializeException\ if\ the\ value\ failed\ to\ serialize\n
comment23.params=arguments
comment23.target=void\ writeTypeTagsRaw(java.util.List)
comment23.text=\n\ Write\ the\ type\ tags\ for\ a\ given\ list\ of\ arguments.\n\ @param\ arguments\ array\ of\ base\ Objects\n\ @throws\ OSCSerializeException\ if\ the\ arguments\ failed\ to\ serialize\n
comment24.params=arguments
comment24.target=void\ writeTypeTags(java.util.List)
comment24.text=\n\ Write\ the\ type\ tags\ for\ a\ given\ list\ of\ arguments,\ and\ cleanup\ the\ stream.\n\ @param\ arguments\ \ the\ arguments\ to\ an\ OSCMessage\n\ @throws\ OSCSerializeException\ if\ the\ arguments\ failed\ to\ serialize\n
comment3.params=
comment3.target=java.util.Map\ getProperties()
comment3.text=\n\ Returns\ the\ set\ of\ properties\ this\ parser\ was\ created\ with.\n\ @return\ the\ set\ of\ properties\ to\ adhere\ to\n\ @see\ ArgumentHandler\#setProperties(Map)\n
comment4.params=buffer
comment4.target=byte[]\ toByteArray(java.nio.ByteBuffer)
comment5.params=output
comment5.target=void\ terminate(BytesReceiver)
comment5.text=\n\ Terminates\ the\ previously\ written\ piece\ of\ data\ with\ a\ single\ {@code\ (byte)\ '0'}.\n\ We\ always\ need\ to\ terminate\ with\ a\ zero,\ especially\ when\ the\ stream\ is\ already\ aligned.\n\ @param\ output\ to\ receive\ the\ data-piece\ termination\n
comment6.params=output
comment6.target=void\ align(BytesReceiver)
comment6.text=\n\ Align\ a\ buffer\ by\ padding\ it\ with\ {@code\ (byte)\ '0'}s\ so\ it\ has\ a\ size\n\ divisible\ by\ {@link\ OSCParser\#ALIGNMENT_BYTES}.\n\ @param\ output\ to\ be\ aligned\n\ @see\ OSCParser\#align\n
comment7.params=output
comment7.target=void\ terminateAndAlign(BytesReceiver)
comment7.text=\n\ Terminates\ the\ previously\ written\ piece\ of\ data\ with\ a\ single\ {@code\ (byte)\ '0'},\n\ and\ then\ aligns\ the\ stream\ by\ padding\ it\ with\ {@code\ (byte)\ '0'}s\ so\ it\ has\ a\ size\n\ divisible\ by\ {@link\ OSCParser\#ALIGNMENT_BYTES}.\n\ We\ always\ need\ to\ terminate\ with\ a\ zero,\ especially\ when\ the\ stream\ is\ already\ aligned.\n\ @param\ output\ to\ receive\ the\ data-piece\ termination\ and\ alignment\n
comment8.params=bundle
comment8.target=void\ write(OSCBundle)
comment9.params=message
comment9.target=void\ writeAddress(OSCMessage)
comment9.text=\n\ Serializes\ a\ messages\ address.\n\ @param\ message\ the\ address\ of\ this\ message\ will\ be\ serialized\n\ @throws\ OSCSerializeException\ if\ the\ message\ failed\ to\ serialize\n
numComments=25
